/*
 * Copyright (C) 2013 Andrew Comminos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.morlunk.jumble.test;

import android.content.Context;
import android.test.AndroidTestCase;
import android.test.suitebuilder.annotation.LargeTest;
import android.util.Log;

import com.morlunk.jumble.Constants;
import com.morlunk.jumble.JumbleParams;
import com.morlunk.jumble.model.Server;
import com.morlunk.jumble.net.JumbleConnection;
import com.morlunk.jumble.net.JumbleConnectionException;
import com.morlunk.jumble.net.JumbleTCPMessageType;
import com.morlunk.jumble.net.JumbleUDPMessageType;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.UUID;

/**
 * Created by andrew on 09/07/13.
 */
public class ConnectionTest extends AndroidTestCase {

    private static final String HOST = "pi.morlunk.com";
    private static final int PORT = 64739;
    private static final String USERNAME = "Jumble-Unit-Tests";
    private static final String PASSWORD = "";

    /** Certificate generated by Mumble- used to test passphrase-less certs */
    public static final String CERTIFICATE_NAME = "jumble-test.p12";

    /**
     * Basic connection with no certificate or authentication (besides password, if specified)
     * @throws JumbleConnectionException
     * @throws InterruptedException
     */
    @LargeTest
    public void testBasicConnection() throws JumbleConnectionException, InterruptedException {
        final JumbleParams params = new JumbleParams();
        params.forceTcp = true; // Easier for testing
        params.server = new Server("Test Server", HOST, PORT, USERNAME, PASSWORD);
        final Object lock = new Object();

        JumbleConnection.JumbleConnectionListener connectionListener = new JumbleConnectionLocker(lock);
        JumbleConnection connection = new JumbleConnection(getContext(), connectionListener, params);
        connection.connect();

        synchronized (lock) {
            lock.wait();
        }

        connection.disconnect();
    }

    /**
     * Connection using a passwordless p12 certificate generated by the mumble client.
     * @throws JumbleConnectionException
     * @throws InterruptedException
     */
    /*
    @LargeTest
    public void testCertificateConnection() throws JumbleConnectionException, InterruptedException, IOException {
        final JumbleParams params = new JumbleParams();
        params.server = new Server("Test Server", HOST, PORT, USERNAME, PASSWORD);


         * In order to better integrate with AIDL, we need to be able to pass a string for the certificate path.
         * Thus, we need to move the certificate in the assets/ folder into temp storage.


        InputStream cis = getContext().getAssets().open(CERTIFICATE_NAME);
        FileOutputStream fos = getContext().openFileOutput(CERTIFICATE_NAME, Context.MODE_PRIVATE);
        byte[] buffer = new byte[cis.available()];
        cis.read(buffer);
        fos.write(buffer);
        fos.close();
        cis.close();

        String tmpCertPath = getContext().getFilesDir()+"/"+CERTIFICATE_NAME;
        params.certificatePath = tmpCertPath;

        final Object lock = new Object();

        JumbleConnection.JumbleConnectionListener connectionListener = new JumbleConnectionLocker(lock);
        JumbleConnection connection = new JumbleConnection(getContext(), connectionListener, params);
        connection.connect();

        synchronized (lock) {
            lock.wait();
        }

        connection.disconnect();
    }
    */

    /**
     * Allows for locking the test thread until the network has finished connecting.
     */
    class JumbleConnectionLocker implements JumbleConnection.JumbleConnectionListener {

        private Object mLock;

        public JumbleConnectionLocker(Object lock) {
            mLock = lock;
        }

        @Override
        public void onConnectionEstablished() {
            synchronized (mLock) {
                mLock.notify();
            }
        }

        @Override
        public void onConnectionDisconnected() {
            synchronized (mLock) {
                mLock.notify();
            }
        }

        @Override
        public void onConnectionError(JumbleConnectionException e) {
            switch (e.getReason()) {
                case REJECT:
                    fail("Reject: "+e.getReject().getReason());
                case USER_REMOVE:
                    fail("UserRemove: "+e.getUserRemove().getReason());
                case OTHER:
                    fail("Other: "+e.getMessage());
            }
        }

        @Override
        public void onConnectionWarning(String warning) {
            Log.w(Constants.TAG, warning);
        }
    }
}
