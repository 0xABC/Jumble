/*
 * Copyright (C) 2013 Andrew Comminos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.morlunk.jumble.test;

import android.test.AndroidTestCase;
import android.test.suitebuilder.annotation.LargeTest;
import android.util.Log;

import com.morlunk.jumble.Constants;
import com.morlunk.jumble.model.Server;
import com.morlunk.jumble.net.JumbleConnection;
import com.morlunk.jumble.net.JumbleConnectionException;

import java.io.IOException;
import java.io.InputStream;

/**
 * Test class used to verify that the user will be able to perform basic connections to servers, with different paramters.
 * Created by andrew on 09/07/13.
 */
public class ConnectionTest extends AndroidTestCase {

    private static final String HOST = "pi.morlunk.com";
    private static final int PORT = 64738;
    private static final String USERNAME = "Jumble-Unit-Tests";
    private static final String PASSWORD = "";

    /** Certificate generated by Mumble- used to test passphrase-less certs */
    public static final String CERTIFICATE_NAME = "jumble-test.p12";

    /**
     * Basic connection with no certificate or authentication (besides password, if specified)
     */
    @LargeTest
    public void testBasicConnection() throws JumbleConnectionException, InterruptedException {
        Server server = new Server("Test Server", HOST, PORT, USERNAME, PASSWORD);
        final Object lock = new Object();

        JumbleConnection.JumbleConnectionListener connectionListener = new JumbleConnectionLocker(lock);
        JumbleConnection connection = new JumbleConnection(getContext(),
                connectionListener,
                server,
                "Jumble",
                null,
                null,
                true, // Forcing TCP makes for easier testing
                true);
        connection.connect();

        synchronized (lock) {
            lock.wait();
        }

        connection.disconnect();
    }

    /**
     * Connection using a passwordless p12 certificate generated by the script in "tools/mk12.sh".
     */
    @LargeTest
    public void testCertificateConnection() throws JumbleConnectionException, InterruptedException, IOException {
        Server server = new Server("Test Server", HOST, PORT, USERNAME, PASSWORD);


        InputStream cis = getContext().getAssets().open(CERTIFICATE_NAME);
        byte[] certificate = new byte[cis.available()];
        cis.read(certificate);
        cis.close();

        final Object lock = new Object();

        JumbleConnection.JumbleConnectionListener connectionListener = new JumbleConnectionLocker(lock);
        JumbleConnection connection = new JumbleConnection(getContext(),
                connectionListener,
                server,
                "Jumble",
                certificate,
                null,
                true, // Forcing TCP makes for easier testing
                true);
        connection.connect();

        synchronized (lock) {
            lock.wait();
        }

        connection.disconnect();
    }
    /**
     * Allows for locking the test thread until the network has finished connecting.
     */
    class JumbleConnectionLocker implements JumbleConnection.JumbleConnectionListener {

        private Object mLock;

        public JumbleConnectionLocker(Object lock) {
            mLock = lock;
        }

        @Override
        public void onConnectionEstablished() {
            synchronized (mLock) {
                mLock.notify();
            }
        }

        @Override
        public void onConnectionDisconnected() {
            synchronized (mLock) {
                mLock.notify();
            }
        }

        @Override
        public void onConnectionError(JumbleConnectionException e) {
            switch (e.getReason()) {
                case REJECT:
                    fail("Reject: "+e.getReject().getReason());
                case USER_REMOVE:
                    fail("UserRemove: "+e.getUserRemove().getReason());
                case OTHER:
                    fail("Other: "+e.getMessage());
            }
        }

        @Override
        public void onConnectionWarning(String warning) {
            Log.w(Constants.TAG, warning);
        }
    }
}
