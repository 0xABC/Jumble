/*
 * Copyright (C) 2013 Andrew Comminos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.morlunk.jumble.test;

import android.content.res.AssetManager;
import android.test.AndroidTestCase;
import android.test.suitebuilder.annotation.SmallTest;

import com.morlunk.jumble.net.JumbleSSLSocketFactory;

import java.io.IOException;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;

/**
 * Created by andrew on 14/07/13.
 */
public class CertificateTest extends AndroidTestCase {

    static {
        // Use Spongy Castle for crypto implementation so we can create and manage PKCS #12 (.p12) certificates.
        Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
    }

    /** Certificate generated by Mumble- used to test passphrase-less certs */
    public static final String CERTIFICATE_NAME = "jumble-test.p12";


    @SmallTest
    public void testCertificateLoading() throws IOException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, NoSuchProviderException, KeyManagementException, CertificateException {
        AssetManager assetManager = getContext().getAssets();
        InputStream certificateStream = assetManager.open(CERTIFICATE_NAME);
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(certificateStream, new char[0]);

        JumbleSSLSocketFactory socketFactory = new JumbleSSLSocketFactory(keyStore, null);
        assertNotNull(socketFactory.createSocket());
    }
}
