/*
 * Copyright (C) 2013 Andrew Comminos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.morlunk.jumble.audio.celt11;

public class CELT11 implements CELT11Constants {
  public static SWIGTYPE_p_CELTMode celt_mode_create(int Fs, int frame_size, int[] error) {
    long cPtr = CELT11JNI.celt_mode_create(Fs, frame_size, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTMode(cPtr, false);
  }

  public static void celt_mode_destroy(SWIGTYPE_p_CELTMode mode) {
    CELT11JNI.celt_mode_destroy(SWIGTYPE_p_CELTMode.getCPtr(mode));
  }

  public static int celt_mode_info(SWIGTYPE_p_CELTMode mode, int request, int[] value) {
    return CELT11JNI.celt_mode_info(SWIGTYPE_p_CELTMode.getCPtr(mode), request, value);
  }

  public static int celt_encoder_get_size(int channels) {
    return CELT11JNI.celt_encoder_get_size(channels);
  }

  public static int celt_encoder_get_size_custom(SWIGTYPE_p_CELTMode mode, int channels) {
    return CELT11JNI.celt_encoder_get_size_custom(SWIGTYPE_p_CELTMode.getCPtr(mode), channels);
  }

  public static SWIGTYPE_p_CELTEncoder celt_encoder_create(int sampling_rate, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_encoder_create(sampling_rate, channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTEncoder(cPtr, false);
  }

  public static SWIGTYPE_p_CELTEncoder celt_encoder_create_custom(SWIGTYPE_p_CELTMode mode, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_encoder_create_custom(SWIGTYPE_p_CELTMode.getCPtr(mode), channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTEncoder(cPtr, false);
  }

  public static SWIGTYPE_p_CELTEncoder celt_encoder_init(SWIGTYPE_p_CELTEncoder st, int sampling_rate, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_encoder_init(SWIGTYPE_p_CELTEncoder.getCPtr(st), sampling_rate, channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTEncoder(cPtr, false);
  }

  public static SWIGTYPE_p_CELTEncoder celt_encoder_init_custom(SWIGTYPE_p_CELTEncoder st, SWIGTYPE_p_CELTMode mode, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_encoder_init_custom(SWIGTYPE_p_CELTEncoder.getCPtr(st), SWIGTYPE_p_CELTMode.getCPtr(mode), channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTEncoder(cPtr, false);
  }

  public static void celt_encoder_destroy(SWIGTYPE_p_CELTEncoder st) {
    CELT11JNI.celt_encoder_destroy(SWIGTYPE_p_CELTEncoder.getCPtr(st));
  }

  public static int celt_encode_float(SWIGTYPE_p_CELTEncoder st, float[] pcm, int frame_size, byte[] compressed, int maxCompressedBytes) {
    return CELT11JNI.celt_encode_float(SWIGTYPE_p_CELTEncoder.getCPtr(st), pcm, frame_size, compressed, maxCompressedBytes);
  }

  public static int celt_encode(SWIGTYPE_p_CELTEncoder st, short[] pcm, int frame_size, byte[] compressed, int maxCompressedBytes) {
    return CELT11JNI.celt_encode(SWIGTYPE_p_CELTEncoder.getCPtr(st), pcm, frame_size, compressed, maxCompressedBytes);
  }

  public static int celt_encoder_ctl(SWIGTYPE_p_CELTEncoder st, int request, int[] value) {
    return CELT11JNI.celt_encoder_ctl(SWIGTYPE_p_CELTEncoder.getCPtr(st), request, value);
  }

  public static int celt_decoder_get_size(int channels) {
    return CELT11JNI.celt_decoder_get_size(channels);
  }

  public static int celt_decoder_get_size_custom(SWIGTYPE_p_CELTMode mode, int channels) {
    return CELT11JNI.celt_decoder_get_size_custom(SWIGTYPE_p_CELTMode.getCPtr(mode), channels);
  }

  public static SWIGTYPE_p_CELTDecoder celt_decoder_create(int sampling_rate, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_decoder_create(sampling_rate, channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTDecoder(cPtr, false);
  }

  public static SWIGTYPE_p_CELTDecoder celt_decoder_create_custom(SWIGTYPE_p_CELTMode mode, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_decoder_create_custom(SWIGTYPE_p_CELTMode.getCPtr(mode), channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTDecoder(cPtr, false);
  }

  public static SWIGTYPE_p_CELTDecoder celt_decoder_init(SWIGTYPE_p_CELTDecoder st, int sampling_rate, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_decoder_init(SWIGTYPE_p_CELTDecoder.getCPtr(st), sampling_rate, channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTDecoder(cPtr, false);
  }

  public static SWIGTYPE_p_CELTDecoder celt_decoder_init_custom(SWIGTYPE_p_CELTDecoder st, SWIGTYPE_p_CELTMode mode, int channels, int[] error) {
    long cPtr = CELT11JNI.celt_decoder_init_custom(SWIGTYPE_p_CELTDecoder.getCPtr(st), SWIGTYPE_p_CELTMode.getCPtr(mode), channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTDecoder(cPtr, false);
  }

  public static void celt_decoder_destroy(SWIGTYPE_p_CELTDecoder st) {
    CELT11JNI.celt_decoder_destroy(SWIGTYPE_p_CELTDecoder.getCPtr(st));
  }

  public static int celt_decode_float(SWIGTYPE_p_CELTDecoder st, byte[] data, int len, float[] pcm, int frame_size) {
    return CELT11JNI.celt_decode_float(SWIGTYPE_p_CELTDecoder.getCPtr(st), data, len, pcm, frame_size);
  }

  public static int celt_decode(SWIGTYPE_p_CELTDecoder st, byte[] data, int len, short[] pcm, int frame_size) {
    return CELT11JNI.celt_decode(SWIGTYPE_p_CELTDecoder.getCPtr(st), data, len, pcm, frame_size);
  }

  public static int celt_decoder_ctl(SWIGTYPE_p_CELTDecoder st, int request) {
    return CELT11JNI.celt_decoder_ctl(SWIGTYPE_p_CELTDecoder.getCPtr(st), request);
  }

  public static byte[] celt_strerror(int error) {
    return CELT11JNI.celt_strerror(error);
  }

}
